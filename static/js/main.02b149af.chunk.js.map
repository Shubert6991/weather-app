{"version":3,"sources":["components/weather.js","App.js","reportWebVitals.js","index.js"],"names":["Weather","weatherData","console","log","currentDate","Date","timeElapsed","now","today","time","toLocaleTimeString","Row","Card","className","bg","Body","src","process","weather","icon","name","main","temp","toDateString","Accordion","Item","eventKey","Header","feels_like","temp_max","temp_min","humidity","App","useState","lat","setLat","long","setLong","data","setData","useEffect","a","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","fetch","then","res","json","result","fetchData","Container","Spinner","animation","role","type","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oTA4CeA,EAvCC,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACjBC,QAAQC,IAAIF,GACZ,IAAIG,EAAc,IAAIC,KAChBC,EAAcD,KAAKE,MACnBC,EAAQ,IAAIH,KAAKC,GACjBG,EAAOL,EAAYM,mBAAmB,SAC5C,OACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAMC,UAAU,YAAYC,GAAG,QAA/B,SACE,eAACF,EAAA,EAAKG,KAAN,WACE,oCACE,qBACEC,IAAG,UAAKC,mCAAL,aAAwChB,EAAYiB,QAAQ,GAAGC,KAA/D,aAEL,6BAAKlB,EAAYmB,OACjB,6BAAKnB,EAAYiB,QAAQ,GAAGG,OAC5B,+BAAKpB,EAAYoB,KAAKC,KAAtB,YAEA,uCAAQd,EAAMe,kBACd,6BAAKd,OAGP,cAACe,EAAA,EAAD,UACE,eAACA,EAAA,EAAUC,KAAX,CAAgBC,SAAS,IAAzB,UACE,cAACF,EAAA,EAAUG,OAAX,wBACA,eAACH,EAAA,EAAUT,KAAX,WACE,8CAAiBd,EAAYoB,KAAKO,WAAlC,YACA,uCAAU3B,EAAYoB,KAAKQ,SAA3B,YACA,uCAAU5B,EAAYoB,KAAKS,SAA3B,YACA,4CAAe7B,EAAYoB,KAAKU,SAAhC,uBCeDC,MAvCf,WAAgB,IAAD,EACSC,mBAAS,IADlB,mBACNC,EADM,KACDC,EADC,OAEWF,mBAAS,IAFpB,mBAENG,EAFM,KAEAC,EAFA,OAGWJ,mBAAS,IAHpB,mBAGNK,EAHM,KAGAC,EAHA,KAuBb,OAlBAC,qBAAU,YACO,uCAAG,sBAAAC,EAAA,6DAChBC,UAAUC,YAAYC,oBAAmB,SAAUC,GACjDV,EAAOU,EAASC,OAAOC,UACvBV,EAAQQ,EAASC,OAAOE,cAHV,SAMVC,MAAM,GAAD,OACNhC,0CADM,yBACwCiB,EADxC,gBACmDE,EADnD,+BAC8EnB,qCAEtFiC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLd,EAAQc,MAXI,2CAAH,qDAcfC,KACC,CAACpB,EAAKE,IAGP,sBAAKvB,UAAU,MAAf,UACE,cAAC0C,EAAA,EAAD,UACuB,oBAAbjB,EAAKjB,KACX,cAAC,EAAD,CAASpB,YAAaqC,IAEtB,cAACkB,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,SAAjC,SACE,sBAAM7C,UAAU,kBAAhB,4BAIN,cAAC,IAAD,CAAa8C,KAAK,SAAS7C,IAAI,QChCtB8C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.02b149af.chunk.js","sourcesContent":["import React from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Row from \"react-bootstrap/Row\";\n\nconst Weather = ({ weatherData }) => {\n  console.log(weatherData);\n  let currentDate = new Date();\n  const timeElapsed = Date.now();\n  const today = new Date(timeElapsed);\n  const time = currentDate.toLocaleTimeString(\"en-US\");\n  return (\n    <Row>\n      <Card className=\"main-card\" bg=\"ligth\">\n        <Card.Body>\n          <section>\n            <img\n              src={`${process.env.REACT_APP_ICON_URL}n/${weatherData.weather[0].icon}@2x.png`}\n            />\n            <h2>{weatherData.name}</h2>\n            <h3>{weatherData.weather[0].main}</h3>\n            <h1>{weatherData.main.temp} &deg;C</h1>\n\n            <h3>{`${today.toDateString()}`}</h3>\n            <h3>{time}</h3>\n          </section>\n\n          <Accordion>\n            <Accordion.Item eventKey=\"0\">\n              <Accordion.Header>More Info</Accordion.Header>\n              <Accordion.Body>\n                <h4>Feels Like: {weatherData.main.feels_like} &deg;C</h4>\n                <h4>Max: {weatherData.main.temp_max} &deg;C</h4>\n                <h4>Min: {weatherData.main.temp_min} &deg;C</h4>\n                <h4>Humidity: {weatherData.main.humidity}%</h4>\n              </Accordion.Body>\n            </Accordion.Item>\n          </Accordion>\n        </Card.Body>\n      </Card>\n    </Row>\n  );\n};\n\nexport default Weather;\n","import \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport React, { useEffect, useState } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport ParticlesBg from \"particles-bg\";\n\n// Custom Components\nimport Weather from \"./components/weather\";\n\nfunction App() {\n  const [lat, setLat] = useState([]);\n  const [long, setLong] = useState([]);\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        setLat(position.coords.latitude);\n        setLong(position.coords.longitude);\n      });\n\n      await fetch(\n        `${process.env.REACT_APP_API_URL}/weather/?lat=${lat}&lon=${long}&units=metric&APPID=${process.env.REACT_APP_API_KEY}`\n      )\n        .then((res) => res.json())\n        .then((result) => {\n          setData(result);\n        });\n    };\n    fetchData();\n  }, [lat, long]);\n\n  return (\n    <div className=\"App\">\n      <Container>\n        {typeof data.main != \"undefined\" ? (\n          <Weather weatherData={data} />\n        ) : (\n          <Spinner animation=\"border\" role=\"status\">\n            <span className=\"visually-hidden\">Loading...</span>\n          </Spinner>\n        )}\n      </Container>\n      <ParticlesBg type=\"circle\" bg={true} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}